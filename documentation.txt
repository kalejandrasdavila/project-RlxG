=====================================================
DOCUMENTACIÓN - PROYECTO ROLEX GLAUSER
=====================================================
Proyecto: react-rlx-glsr (Store VTEX + React)
Versión: 0.0.4

=====================================================
ÍNDICE
=====================================================
1. RESUMEN DEL PROYECTO
2. ARQUITECTURA GENERAL
3. DOCUMENTACIÓN REACT
4. DOCUMENTACIÓN STORE (VTEX)
5. HOOKS PERSONALIZADOS
6. COMPONENTES PRINCIPALES
7. UTILIDADES Y HELPERS
8. CONFIGURACIÓN Y DEPENDENCIAS
9. RUTAS Y NAVEGACIÓN
10. ESTILOS Y CSS HANDLES

=====================================================
1. RESUMEN DEL PROYECTO
=====================================================

Este es un proyecto de e-commerce para la marca Rolex desarrollado para GLAUSER (distribuidor oficial).
El proyecto está construido sobre la plataforma VTEX IO utilizando React con TypeScript.

Características principales:
- Catálogo completo de relojes Rolex organizados por colecciones
- Sistema de navegación dinámico con rutas parametrizadas
- Formularios de contacto y consulta
- Galería de imágenes con lightbox
- Integración con Adobe Analytics
- Diseño responsive con Swiper.js
- Manejo de estado local con hooks personalizados

=====================================================
2. ARQUITECTURA GENERAL
=====================================================

ESTRUCTURA DE DIRECTORIOS:
├── react/                          # Aplicación React principal
│   ├── components/                  # Componentes React
│   │   ├── watches/                 # Componentes de colecciones de relojes
│   │   ├── parts/                   # Componentes compartidos (Nav, Footer, etc.)
│   │   ├── hooks/                   # Hooks personalizados
│   │   ├── coleccion/               # Componente de página de colección
│   │   ├── contacto/                # Componentes de contacto
│   │   ├── asistencia/              # Componentes de asistencia
│   │   ├── mundorlx/                # Componentes del mundo Rolex
│   │   ├── nuevos-modelos/          # Componentes de nuevos modelos
│   │   └── savoir-faire/            # Componentes de watchmaking
│   ├── utils/                       # Utilidades y helpers
│   ├── typings/                     # Definiciones de tipos TypeScript
│   └── *.tsx                        # Componentes principales de página
├── store/                           # Configuración VTEX Store
│   ├── blocks/                      # Bloques del store
│   ├── interfaces.json              # Mapeo de interfaces a componentes
│   └── routes.json                  # Configuración de rutas
└── messages/                        # Archivos de internacionalización

TECNOLOGÍAS UTILIZADAS:
- React 17+ con TypeScript
- VTEX IO Platform
- Swiper.js para carruseles
- jQuery para manipulación DOM legacy
- React Helmet Async para SEO
- Adobe Analytics (DTM)
- CSS Modules con CSS Handles

=====================================================
3. DOCUMENTACIÓN REACT
=====================================================

COMPONENTES PRINCIPALES DE PÁGINA:
----------------------------------

1. Home.tsx
   - Componente principal de la página de inicio
   - Integra: Nav, Footer, RlxExploreMas
   - Utiliza: useInitScripts hook
   - CSS Handles: headercomponent, rlx_html, home_rlx, etc.

2. ColeccionRlx.tsx
   - Página principal de colección de relojes
   - Muestra todas las colecciones disponibles
   - Integra navegación y exploración de modelos

3. WatchCollection.tsx
   - Componente dinámico para mostrar colecciones específicas
   - Recibe parámetro de colección via routing
   - Mapea colecciones a componentes específicos:
     * submariner → Submariner
     * gmt-master-ii → GmtMaster
     * yacht-master → YachtMaster
     * sky-dweller → SkyDweller
     * oyster-perpetual → OysterPerp
     * land-dweller → LandDweller
     * deepsea → Deepsea
     * explorer → Explorer
     * datejust → DateJust
     * day-date → Daydate
     * lady-datejust → LadyDateJ
     * cosmograph-daytona → CosmographD
     * air-king → Airking
     * 1908 → Collection1908

4. WatchModel.tsx
   - Componente para modelos específicos de relojes
   - Importación dinámica de componentes basada en parámetros URL
   - Manejo de errores para modelos no encontrados

5. NewsModels.tsx
   - Página de nuevos modelos 2025
   - Showcase de las últimas incorporaciones

6. Watchmaking.tsx
   - Página de "Savoir-faire" relojero
   - Información sobre el arte de la relojería

7. Asistencia.tsx
   - Página de asistencia y mantenimiento
   - Información de servicios post-venta

8. MundoRlx.tsx
   - Página del mundo Rolex
   - Artículos y contenido editorial

9. Contactenos.tsx
   - Página de contacto
   - Formulario de contacto e información de tienda

COMPONENTES DE COLECCIONES:
--------------------------

Cada colección de relojes tiene su propio componente:
- Submariner: Relojes de buceo icónicos
- GMT-Master II: Relojes para viajeros
- Yacht-Master: Relojes náuticos de lujo
- Sky-Dweller: Relojes con calendario anual
- Oyster Perpetual: La esencia de Rolex
- Land-Dweller: Exploración terrestre
- Deepsea: Buceo extremo
- Explorer: Aventura y exploración
- Datejust: El reloj de referencia
- Day-Date: El reloj de los presidentes
- Lady-Datejust: Elegancia femenina
- Cosmograph Daytona: Cronógrafos de carreras
- Air-King: Aviación y precisión
- 1908: Colección dress watch

COMPONENTES COMPARTIDOS (parts/):
--------------------------------

1. Nav.tsx
   - Navegación principal del sitio
   - Menú responsive con toggle
   - Elementos del menú:
     * Descubra Rolex
     * Relojes Rolex
     * Nuevos Modelos 2025
     * «Savoir-faire» relojero
     * Mantenimiento
     * El mundo de Rolex
     * Contáctenos

2. NavModels.tsx
   - Navegación específica para páginas de modelos
   - Similar a Nav.tsx pero adaptado para contexto de modelos

3. Footer.tsx
   - Footer del sitio con información de contacto
   - Links adicionales y redes sociales

4. RlxExploreMas.tsx / RlxExploreMasNModels.tsx
   - Componentes de exploración de modelos
   - Carrusel de productos relacionados

5. Rlx-watches-formulario.tsx
   - Formulario de consulta sobre relojes
   - Validación de campos
   - Integración con sistema de contacto
   - Estados del formulario:
     * Selección de tipo de atención
     * Datos personales (nombre, apellido, email, teléfono)
     * Mensaje de consulta
     * Términos y condiciones

ESTRUCTURA DE MODELOS:
---------------------

Cada colección contiene múltiples modelos específicos:
- Estructura: /watches/{colección}/modelos/{código-modelo}.tsx
- Ejemplo: /watches/submariner/modelos/M124060-0001.tsx
- Cada modelo incluye:
  * Especificaciones técnicas
  * Galería de imágenes
  * Información de precios
  * Formulario de consulta

=====================================================
4. DOCUMENTACIÓN STORE (VTEX)
=====================================================

CONFIGURACIÓN VTEX:
------------------

manifest.json:
- Vendor: glauser
- Name: storerlx  
- Version: 0.0.4
- Title: rlx_store
- Builders: react, styles, messages, store, docs

DEPENDENCIAS VTEX:
- vtex.store: 2.x
- vtex.store-header: 2.x  
- vtex.css-handles: 0.x
- vtex.render-runtime: 8.x

INTERFACES (store/interfaces.json):
----------------------------------

Mapeo de rutas del store a componentes React:
- store.home-rlx → Home
- store.coleccionRlx → ColeccionRlx
- store.watch-collection → WatchCollection
- store.watch-model → WatchModel
- store.nuevos-modelos → NewsModels
- store.watchmaking → Watchmaking
- store.asistencia → Asistencia
- store.mundo-rolex → MundoRlx
- store.contactenos → Contactenos

RUTAS (store/routes.json):
-------------------------

Sistema de routing del store:
- "/" → store.home-rlx (Home)
- "/rolex" → store.custom#rolex
- "/rolex/coleccion-rolex/" → store.coleccionRlx
- "/rolex/watches/:collection" → store.watch-collection (dinámico)
- "/rolex/watches/:collection/:model" → store.watch-model (dinámico)
- "/rolex/nuevos-modelos-2025/" → store.nuevos-modelos
- "/rolex/watchmaking/" → store.watchmaking
- "/rolex/asistencia-rolex/" → store.asistencia
- "/rolex/mundo-rolex/" → store.mundo-rolex
- "/rolex/contactenos/" → store.contactenos

BLOQUES (store/blocks/):
-----------------------

rolex.jsonc:
- store.custom#rolex → blocks: ["Home"]
- store.custom#coleccion-rolex → blocks: ["store.coleccionRlx"]

home.jsonc:
- Configuración básica para store.home-rlx y Home

=====================================================
5. HOOKS PERSONALIZADOS
=====================================================

1. useInitScripts.tsx
   ----------------------
   Hook principal que inicializa todos los scripts del sitio.
   
   FUNCIONALIDADES:
   - Adobe Launch (Analytics): Carga script de DTM para tracking
   - Toggle de navegación: Manejo del menú responsive
   - Scroll suave: Botón "Volver arriba" con animación
   - Swiper Principal: Carrusel de la página principal
   - Swiper Footer: Carrusel del footer con productos
   - Swiper Mobile: Carrusel específico para dispositivos móviles
   - Sistema de Accordion: Desplegables interactivos
   - Lightbox: Galería de imágenes con navegación
   - Show/Hide Precio: Toggle para mostrar/ocultar precios
   - Tracking de descargas: Analytics para PDFs descargados
   
   CONFIGURACIONES SWIPER:
   - Principal: Sin loop, con navegación y paginación
   - Footer: 4 slides por vista, responsive (2 en mobile)
   - Mobile: 1 slide por vista, solo en pantallas ≤767px
   
   LIMPIEZA:
   - Cleanup automático de event listeners
   - Destrucción de instancias Swiper
   - Limpieza de intervalos

2. ContactoRlx.ts (useHorario)
   ----------------------------
   Hook para manejo de horarios de atención.
   
   FUNCIONALIDADES:
   - Cálculo automático de horarios según día de la semana
   - Toggle para mostrar/ocultar información de horarios
   - Estado de apertura/cierre
   
   HORARIOS:
   - Domingo: 11:00am - 04:00pm
   - Lunes a Sábado: 10:00am - 08:00pm
   
   INTERFACE:
   - horario: string (horario actual)
   - isOpen: boolean (estado de toggle)
   - toggleHorario: función para alternar

=====================================================
6. COMPONENTES PRINCIPALES
=====================================================

PATRÓN DE COMPONENTES:
---------------------

Todos los componentes principales siguen un patrón consistente:

1. IMPORTS:
   - React y hooks necesarios
   - Helmet para SEO
   - useInitScripts hook
   - Componentes compartidos (Nav, Footer, etc.)
   - useCssHandles de VTEX
   - Estilos CSS

2. CSS_HANDLES:
   - Array de constantes para manejo de estilos
   - Categorías: HEADER, contenido, layout, específicos

3. ESTRUCTURA JSX:
   - Helmet para meta tags y SEO
   - Navegación (Nav o NavM)
   - Contenido principal
   - RlxExploreMas (productos relacionados)
   - Footer

4. INICIALIZACIÓN:
   - Llamada a useInitScripts()
   - Configuración de CSS handles

COMPONENTES DE FORMULARIOS:
--------------------------

WatchesForm (Rlx-watches-formulario.tsx):
- Formulario multi-paso para consultas sobre relojes
- Validación de campos en tiempo real
- Estados: mensaje → datos personales → envío
- Campos: tipo de atención, nombre, apellido, email, teléfono, mensaje
- Validaciones: email format, teléfono 10 dígitos, términos obligatorios

COMPONENTES DE NAVEGACIÓN:
-------------------------

Nav.tsx y NavModels.tsx:
- Navegación principal responsive
- Detección de ruta activa
- Menú toggle para mobile
- Items de menú configurables

COMPONENTES DE LAYOUT:
---------------------

Footer.tsx:
- Footer principal con información de contacto
- Links a redes sociales
- Información de la tienda

RlxExploreMas.tsx:
- Carrusel de productos relacionados
- Integración con Swiper
- Responsive design

=====================================================
7. UTILIDADES Y HELPERS
=====================================================

urlUtils.ts:
-----------

FUNCIONES DISPONIBLES:

1. getBaseUrl(): string
   - Retorna la URL base del desarrollo
   - Valor: 'https://devjhernandez--glauser.myvtex.com'

2. getCurrentUrl(path?: string): string  
   - Construye URL completa con path opcional
   - Combina base URL con path específico

3. buildUrl(path: string): string
   - Constructor de URLs para el proyecto
   - Utilizado en formularios y navegación

4. getStylesUrl(): string
   - URL para hojas de estilo del proyecto
   - Centraliza referencias a CSS externos

TIPADO GLOBAL:
-------------

global.d.ts:
- Declaraciones de módulos para assets
- Soporte para: .css, .svg, .png, .jpg, .jpeg, .gif
- Extensiones del objeto Window para funciones globales

=====================================================
8. CONFIGURACIÓN Y DEPENDENCIAS
=====================================================

PACKAGE.JSON PRINCIPAL:
----------------------

Scripts disponibles:
- lint: ESLint para archivos JS/TS
- format: Prettier para formateo
- lint:locales: Validación de traducciones
- test: Ejecutar tests

Dependencias de desarrollo:
- TypeScript 3.9.7
- ESLint con configuraciones VTEX
- Prettier para formateo de código
- Husky para pre-commit hooks
- Lint-staged para archivos staged

Dependencias VTEX:
- vtex.render-runtime: Runtime de VTEX
- vtex.store: Core del store
- vtex.store-header: Header del store
- vtex.css-handles: Sistema de CSS

DEPENDENCIAS REACT:
------------------

Principales:
- React 17+ con tipos TypeScript
- react-helmet-async: SEO y meta tags
- jQuery: Manipulación DOM legacy
- Swiper: Carruseles y sliders

Configuración:
- ESLint: Configuraciones VTEX para React
- Prettier: Formateo consistente
- TypeScript: Tipado estático

=====================================================
9. RUTAS Y NAVEGACIÓN
=====================================================

SISTEMA DE ROUTING:
------------------

El proyecto utiliza el sistema de routing de VTEX con parámetros dinámicos:

RUTAS ESTÁTICAS:
- / → Página de inicio
- /rolex → Página principal de Rolex
- /rolex/coleccion-rolex/ → Catálogo completo
- /rolex/nuevos-modelos-2025/ → Nuevos modelos
- /rolex/watchmaking/ → Savoir-faire relojero
- /rolex/asistencia-rolex/ → Asistencia y mantenimiento
- /rolex/mundo-rolex/ → El mundo de Rolex
- /rolex/contactenos/ → Página de contacto

RUTAS DINÁMICAS:
- /rolex/watches/:collection → Página de colección específica
- /rolex/watches/:collection/:model → Página de modelo específico

NAVEGACIÓN:
----------

El componente Nav.tsx maneja la navegación principal:
- Detección de ruta activa usando useRuntime()
- Aplicación de clase 'active' al item actual
- Menú responsive con toggle para mobile

PARÁMETROS DE RUTA:
------------------

Los componentes acceden a parámetros via useRuntime():
```typescript
const { route } = useRuntime();
const collection = route?.params?.collection as string;
const model = route?.params?.model as string;
```

=====================================================
10. ESTILOS Y CSS HANDLES
=====================================================

SISTEMA CSS HANDLES:
-------------------

Cada componente define sus propios CSS_HANDLES para styling:

CATEGORÍAS COMUNES:
- HEADER: headercomponent, rlx_html, home_rlx, rlx_menu, etc.
- LAYOUT: row_grid, rlx_container, content_column_*, etc.
- CONTENIDO: headline*, body_*, pb_*, pt_*, mb_*, etc.
- COMPONENTES: btn_primary_rlx, component_*, etc.

EJEMPLO DE USO:
```typescript
const CSS_HANDLES = [
    'headercomponent', 'rlx_html', 'home_rlx'
] as const;

const handles = useCssHandles(CSS_HANDLES);

// En JSX:
<div className={handles.headercomponent}>
```

ESTILOS EXTERNOS:
----------------

El proyecto carga múltiples hojas de estilo:
1. style.min.css (estilos base)
2. style-rolex-general-glauser.css (estilos específicos Rolex)
3. swiper-bundle.min.css (estilos de Swiper)

RESPONSIVE DESIGN:
-----------------

- Breakpoints definidos en Swiper:
  * 320px: 2 slides por vista
  * 480px: 2 slides por vista  
  * 768px+: 4 slides por vista

- CSS handles específicos para diferentes tamaños:
  * col_lg_* para desktop
  * col_6_* para tablet
  * Clases responsive automáticas

=====================================================
COLECCIONES DE RELOJES DISPONIBLES
=====================================================

1. SUBMARINER
   - Relojes de buceo icónicos
   - Resistencia al agua hasta 300m
   - Múltiples variaciones de materiales

2. GMT-MASTER II  
   - Relojes para viajeros
   - Función GMT de 24 horas
   - Bisel giratorio bidireccional

3. YACHT-MASTER
   - Relojes náuticos de lujo
   - Diseño elegante para navegación
   - Materiales preciosos

4. SKY-DWELLER
   - Calendario anual
   - Función GMT
   - Complicación más sofisticada de Rolex

5. OYSTER PERPETUAL
   - La esencia de Rolex
   - Movimiento automático
   - Diseño atemporal

6. LAND-DWELLER
   - Exploración terrestre
   - Resistencia extrema
   - Sin fecha para máxima legibilidad

7. DEEPSEA
   - Buceo extremo
   - Resistencia hasta 3,900m
   - Tecnología avanzada

8. EXPLORER
   - Aventura y exploración
   - Legibilidad excepcional
   - Resistencia comprobada

9. DATEJUST
   - El reloj de referencia
   - Ventana de fecha
   - Variedad de materiales y esferas

10. DAY-DATE
    - El reloj de los presidentes
    - Día y fecha completos
    - Solo en metales preciosos

11. LADY-DATEJUST
    - Elegancia femenina
    - Tamaños específicos para mujer
    - Opciones de joyas

12. COSMOGRAPH DAYTONA
    - Cronógrafos de carreras
    - Función cronógrafo
    - Legado en automovilismo

13. AIR-KING
    - Aviación y precisión
    - Diseño limpio
    - Herencia aeronáutica

14. 1908
    - Colección dress watch
    - Elegancia clásica
    - Movimientos de manufactura

=====================================================
FUNCIONALIDADES ESPECIALES
=====================================================

LIGHTBOX DE IMÁGENES:
- Galería interactiva para modelos de relojes
- Navegación con teclado (flechas, escape)
- Paginación con dots
- Responsive design

FORMULARIOS INTELIGENTES:
- Validación en tiempo real
- Mensajes de error específicos
- Flujo multi-paso
- Integración con backend

ANALYTICS:
- Adobe Analytics (DTM) integrado
- Tracking de page views
- Tracking de descargas
- Eventos personalizados

PERFORMANCE:
- Importación dinámica de componentes
- Lazy loading de recursos
- Optimización de Swiper
- Cleanup automático de event listeners

=====================================================
NOTAS TÉCNICAS
=====================================================

COMPATIBILIDAD:
- React 17+ 
- TypeScript 3.9+
- Soporte IE11+ (via polyfills)
- Mobile-first responsive

DESARROLLO:
- ESLint + Prettier configurados
- Pre-commit hooks activos
- Configuración VTEX específica
- Hot reload en desarrollo

DEPLOYMENT:
- Plataforma VTEX IO
- Workspace de desarrollo: devjhernandez--glauser
- URL de producción: glauser.myvtex.com

MANTENIMIENTO:
- Logs de consola para debugging
- Error boundaries implícitos
- Fallbacks para componentes no encontrados
- Validación de parámetros de ruta

=====================================================
FIN DE LA DOCUMENTACIÓN
=====================================================


